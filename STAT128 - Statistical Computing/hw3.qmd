---
title: "hw3 stat128"
author: "Austin Melendez"
format: 
  html:
    self-contained: true
editor: visual
---

```{r, message=FALSE}
#install.packages("tidyverse")
library(tidyverse)
library(tidyr)
library(dplyr)
```

Questions on this homework are intentionally becoming more high level, and have multiple interpretations. For example, for the question "what were the 5 most popular songs", you will have to define a reasonable metric for popularity.

## 1. Billboard

The following questions refer to the `billboard` dataset from the tidyr package.

#### 1. What period does the data cover?

```{r}
billboard |>
  pull(date.entered) |>
  unique() |>
  sort()
  
```

This dataset actually covers from 06/05/1999 to 12/30/2000.

#### 2. Is the data complete for the year 2000?

```{r}
billboard |>
  filter(year(date.entered) == 2000) |>
  pull(date.entered) |>
  unique() |>
  sort()
```

```{r}
billboard |>
  mutate(
    date = date.entered + week(date.entered)
  ) |>
  filter(year(date) == 2000) |>
  group_by(date) |>
  summarize(n())
```

No, the data is not complete because there are not 100 songs listed for every week for the year 2000.

#### 3. What were the 5 most popular songs?

Answer by creating and commenting on a data visualization.

```{r}
billboard |>
  pivot_longer(
    cols = starts_with("wk"),
    names_to = "week",
    values_to = "rank",
    values_drop_na = TRUE
  ) |>
  group_by(track) |>
  summarize(
    avg_rank = mean(rank),
    weeks_long = n()
  ) |>
  arrange(avg_rank) |>
  head()
```

```{r}
billboard |>
  pivot_longer(
    cols = starts_with("wk"),
    names_to = "week",
    values_to = "rank",
    values_drop_na = TRUE
  ) |>
  group_by(track) |>
  summarize(
    avg_rank = mean(rank),
    weeks_long = n()
  ) |>
  arrange(avg_rank) |>
  head() |>
  ggplot(aes(x = avg_rank)) +
  geom_bar(aes(color = track))
  
```

The top 5 most popular songs by averaging every song's ranks for all 52 weeks are "Be With You", "Bye Bye Bye", "Hot Boyz", "Independent Women Pa...", "Maria, Maria", and "Music".

#### 4. On average, how long does a song stay in the top 100?

```{r}
billboard |>
  pivot_longer(
    cols = starts_with("wk"),
    names_to = "week",
    values_to = "rank",
    values_drop_na = TRUE
  ) |>
  group_by(track) |>
  summarize(
    weeks_long = n()
  ) |>
  mutate(
    avg_weeks = mean(weeks_long)
  )
  
```

On average, a song stays in the top 100 for just over 16 weeks.

#### 5. Pick three songs that reached number one and visualize the "popularity trajectory" of their ranking over time.

Comment on your visualization and explain it to a general audience. Do some songs appear to gain and lose popularity more quickly than others? \[Maria Maria, Say My Name, It's Gonna Be Me\]

```{r}
billboard |>
    pivot_longer(
    cols = starts_with("wk"),
    names_to = "week",
    values_to = "rank",
    values_drop_na = TRUE
  ) |>
  group_by(track) |>
  filter(track == "Maria, Maria" | track == "Say My Name" | track == "It's Gonna Be Me") |>
  ggplot(aes(x = week, y = rank, color = track, group = track)) +
  geom_line() 
  
```

## 2. World Bank

The following questions refer to the `world_bank_pop` dataset in the tidyr package. I suggest you use the [countrycode package](https://cran.r-project.org/package=countrycode) to find country names.

#### 1. Use the country abbreviation to join the country names to the data.

```{r}
#install.packages("countrycode")
library("countrycode")

abbr_key <- pull(world_bank_pop, country)
abbr_key <- unique(abbr_key)

country_names <- countrycode(abbr_key, origin="iso3c", destination="country.name", nomatch = NULL)

abbr_key <- data.frame(abbr=abbr_key, name=unique(country_names))

df <- inner_join(world_bank_pop, abbr_key, by = join_by(country == abbr)) |>
  relocate(name)

df
```

#### 2. How has the total population changed for the 5 largest countries?

Answer by creating and commenting on a data visualization using the relative growth. Use country names, not abbreviations.

```{r}
tot_pop <- filter(df, indicator == "SP.POP.TOTL") 
pop_grow <- filter(df, indicator == "SP.POP.GROW")
pop_grow <- subset(pop_grow, select = -c(country,indicator) )

tot_pop <- subset(tot_pop, select = c("name","2017"))

#Had to find this function on dyplr becuase of an update with R on sorting
#https://help.displayr.com/hc/en-us/articles/7150750270095-Changes-in-R-Version-4-3-0
data.matrix = as.matrix(tot_pop)
order.of.columns = order(data.matrix[,2], decreasing = TRUE)
sorted.df = tot_pop[order.of.columns, ]

sorted.df
```

The three biggest countries that were translated to actual country names were China (1396215000), India (1354195680), and United States (325122128).

```{r}
pop_grow |>
  filter(name == "China" | name == "India" | name == "United States") |>
  pivot_longer(
    cols = !name, 
    names_to = "year", 
    values_to = "growth"
  ) |>
  ggplot(aes(x = year, y = growth, color = name, group = name)) +
  geom_line() 
```

All three of the largest countries have had an overall declining population growth during the dataset time frame (2000 - 2017).

## 3. Your own question

**How does 5 random countries urban population growth compare to their overall total population?**

```{r}
tot_pop <- filter(df, indicator == "SP.POP.TOTL")
urb_grow <- filter(df, indicator == "SP.URB.GROW")
tot_pop <- subset(tot_pop, select = -c(country,indicator))
urb_grow <- subset(urb_grow, select = -c(country,indicator))

rand <- sample(1:266, 5)
country_names <- data.frame(country_names)
country_names[rand,]
```

```{r}
tot_pop

tot_pop |>
  filter(name == "Palau" | name == "Lebanon" | name == "Kyrgyzstan" | name == "Guam" | name == "Moldova")  |>
  pivot_longer(
    cols = !name, 
    names_to = "year", 
    values_to = "population"
  ) |>
  ggplot(aes(x = year, y = population, color = name, group = name)) +
  geom_line()  
```

```{r}
urb_grow

urb_grow |>
  filter(name == "Palau" | name == "Lebanon" | name == "Kyrgyzstan" | name == "Guam" | name == "Moldova")  |>
  pivot_longer(
    cols = !name, 
    names_to = "year", 
    values_to = "growth"
  ) |>
  ggplot(aes(x = year, y = growth, color = name, group = name)) +
  geom_line() 
```

Lebanon had a significant increase in its urban growth from 2012 to 2014 which corresponds to a significant increase in overall total population on the graph above. Similarly, Kyrgyzstan has an overall slight increase in their total population and the graph shows a similar slight increase in urban growth, however it is not as sharp a spike/increase as Lebanon. The other countries selected are very small total populations that do not increase in overall total population, even though curiously Palau has two increases in urban growth, they did not significantly impact total population. Another striking result is the slight decline in total population in Moldova, which can be seen throughout the dataset regardless of their urban growth rate increasing at one time. However a significant decrease in population can also be see from 2014 to 2017 and the urban growth rate drops with it.
