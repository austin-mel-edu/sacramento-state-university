(define (inc_n n)
  (lambda (x)
    (+ n x)))

(define (len ls)
  (if (null? ls) 0
      (length ls)))

(define (maxmin ls)
  (define (min a b) (if (< a b) a b))
  (define (max a b) (if (> a b) a b))
  (let loop ((x -inf.0) (y +inf.0) (ls ls))
    (if (null? ls)
        (list x y)
        (loop (max (car ls) x) (min (car ls) y) (cdr ls)))))

(define (mem var ls)
  (cond ((null? ls) #f)
        ((equal? var (car ls)) #t)
        (else (mem var (cdr ls)))))

(define (ins var ls)
  (cond ((null? ls) #f)
        ((equal? (mem var ls) #f) (append ls var))))

(define (numT bool ls)
  

(define (moreT bool ls ls2)
  

((inc_n 3) 2)
(len '(2 1))
(maxmin '(4 2 -1 10))
(mem 4 '(1 4 -2))
(ins '(5) '(2 10 -3))
;(numT number? '(1 -5 -4 (2 1) 7))
;(moreT negative? '(8 -4 3 8) '(7 -3 -2 1 -5))