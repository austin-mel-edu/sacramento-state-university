---
title: "HW2 - Data Transformation" 
author: "Austin Melendez"
format:   
  html: 
    self-contained: true 
editor: visual
---

------------------------------------------------------------------------

# Question 1

------------------------------------------------------------------------

## 1) Tweak the following R command so it runs.

```         
libary(todyverse)
ggplot(dTA = mpg) + 
geom_point(maping = aes(x = displ y = hwy)) +
geom_smooth(method = "lm)
```

```{r}
#install.packages("tidyverse")
#install.packages("nycflights13")
library(tidyverse)
library(nycflights13)
ggplot(data = mpg) + 
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy), method = "lm")
```

------------------------------------------------------------------------

# Question 2

------------------------------------------------------------------------

### The following questions refer to the `flights`data frame in `nycflights13`package.

### 2.1) In a single pipeline for each condition, find all flights that meet the condition:

#### Had an arrival delay of two or more hours

```{r}
flights |>
  filter(arr_delay >= 120)
```

#### Flew to Houston (`IAH` or `HOU`)

```{r}
flights |>
  filter(dest == "IAH" | dest == "HOU")
```

#### Were operated by United, American, or Delta

```{r}
flights |>
  filter(carrier == "UA" | carrier == "AA" | carrier == "DL")
```

#### Departed in summer (July, August, and September)

```{r}
flights |>
  filter(month == 7 | month == 8 | month == 9)
```

#### Arrived more than two hours late, but didn't leave late

```{r}
flights |>
  filter(arr_delay >= 120 & dep_delay == 0)
```

#### Were delayed by at least an hour, but made up over 30 minutes in flight

```{r}
flights |>
  filter(dep_delay >= 60 & (air_time <= (sched_arr_time - sched_dep_time) - 30))
```

### 2.2) Sort `flights` to find the flights with longest departure delays. Find the flights that left earliest in the morning.

```{r}
flights |>
  filter(dep_delay >= 0) |>
  arrange(dep_time,desc(dep_delay))
```

### 2.3) Sort `flights` to find the fastest flights. (Hint: Try including a math calculation inside of your function.)

```{r}
flights |>
  mutate(speed = distance / air_time * 60) |>
  arrange(desc(speed))
```

### 2.4) Was there a flight on every day of 2013?

Yes, there were flights on every day of 2013.

```{r}
flights |>
  group_by(year, month, day) |>
  filter(year == 2013) |>
  summarize(n = n()) |>
  count()
  
  
```

### 2.5) Which flights traveled the farthest distance? Which traveled the least distance?

The three shortest distinct flights were from EWR to LGA (17 miles), EWR to PHL (80 miles), and JFK to PHL (94 miles).

The three longest distinct flights were from JFK to HNL (4983 miles), EWR to HNL (4963 miles), EWR to ANC (3370 miles).

```{r}
flights |>
  arrange(distance)
```

```{r}
flights |>
  arrange(desc(distance))
  
```

### 2.6) Does it matter what order you used `filter()`and `arrange()`if you're using both? Why/why not? Think about the results and how much work the functions would have to do.

When using filter() order does not matter, because it will return all entries that match the query you input into the command. However order does matter in arrange(), because it affects which columns are sorted by first. Columns are sorted based on inputs left to rights.

### 2.7) What happens if you specify the name of the same variable multiple times in a `select()` call?

```{r}
# experiment
flights |>
  select(year, year, month, year)
```

You can input the same variable name multiple times in the select call and it will only show the column once.

### 2.8) Rename `air_time` to `air_time_min` to indicate units of measurement and move it to the beginning of the data frame.

```{r}
#flights |>
#  relocate(air_time_min) |>
#  rename(air_time = air_time_min)
```

```{r}
flights |>
  relocate(tailnum) |>
  rename(tail_num = tailnum)
```

I copied the exact same method shown in the documentation (as seen above with tailnum) and the functions worked perfectly fine, but when changing the variable to air_time and attempting to rename that variable it gives me an error that the variable does not exist, this makes no sense because the variable definitely exists.

# **Question 3**

------------------------------------------------------------------------

### 3.1) Which carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs.Â bad carriers? Why/why not? (Hint: think about `flights |> group_by(carrier, dest) |> summarize(n())`)

```{r}
flights |>
  group_by(carrier, dest) |>
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE)
  ) |>
  arrange(desc(avg_delay))
  
  
```

It seems that the carrier with the longest average delay is F9 and EV when ignoring the airports delay affect. However, when adding the destination airport to the grouping function we see that the carriers OO and EV have multiple large average delays at multiple different airports, so I would claim that the carrier is the one that is causing the delays.

### 3.2) Find the flights that are most delayed upon departure from each destination.

```{r}
flights |>
  group_by(dest) |>
  slice_max(dep_delay, n = 1) |>
  relocate(dest, dep_delay)

```

### 3.3) How do delays vary over the course of the day. Illustrate your answer with a plot.

```{r}
flights |>
  group_by(hour) |>
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE)
  ) |>
  arrange(desc(avg_delay)) |>
  ggplot(aes(x = hour, y = avg_delay)) +
  geom_smooth(se = FALSE)
  
```

The average departure delay seems to increase as the day goes on and peaks at around 23 minutes at around hour 18 (6pm) before slightly dropping again to around 15 minutes.

### 3.4) What happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and friends?

```{r}
flights |>
  group_by(dest) |>
  slice_min(arr_delay, n = -1) |>
  relocate(dest, arr_delay)
```

When using a negative n value in the slice_min function it simply ignores the value specified and selects all the values of the data frame.

### 3.5) Explain what `count()` does in terms of the dplyr verbs you just learned. What does the `sort` argument to [`count()`](https://dplyr.tidyverse.org/reference/count.html) do?

------------------------------------------------------------------------

The count() function counts the unique observations of one or more variables in the data frame. The sort argument to count(), if specified as True, will show the largest groups at the top of the output.

# Question 5

------------------------------------------------------------------------

### Come up with and answer your own question regarding flights. Answer it using a pipeline with at least 3 steps.

Which carrier spends the longest average time actually in the air?

```{r}
flights |>
  group_by(carrier) |>
  summarize(
    avg_flight = mean(air_time, na.rm = TRUE)
  ) |>
  arrange(desc(avg_flight))
```

The carrier HA has the longest average flights, which is almost double the second carrier's flight time. HA has an average flight time of 623 minutes, while the second carrier VX has an average flight time of 337 minutes.
